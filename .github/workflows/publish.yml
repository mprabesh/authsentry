name: Build and Publish to GitHub Packages

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.0.1, etc.
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run test coverage
        run: npm run test:coverage
        if: matrix.node-version == 18  # Only run coverage on one Node version
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@mprabesh'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package (if build script exists)
        run: npm run build --if-present
      
      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      - name: Verify package version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.extract_version.outputs.version }}"
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Package version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
      
      - name: Configure package for GitHub Packages
        run: |
          # Create a temporary package.json for publishing to GitHub Packages
          cp package.json package.json.backup
          
          # Update package name to include scope for GitHub Packages
          node -e "
            const pkg = require('./package.json');
            pkg.name = '@mprabesh/authsentry';
            pkg.publishConfig = {
              registry: 'https://npm.pkg.github.com',
              access: 'public'
            };
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
      
      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Restore original package.json
        run: mv package.json.backup package.json
        if: always()
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          body: |
            ## Changes in version ${{ steps.extract_version.outputs.version }}
            
            See [CHANGELOG.md](https://github.com/mprabesh/authsentry/blob/main/CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ### From GitHub Packages:
            ```bash
            npm install @mprabesh/authsentry
            ```
            
            ### From npm (if published there):
            ```bash
            npm install authsentry
            ```
          draft: false
          prerelease: false

  notify:
    needs: [test, publish]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: needs.publish.result == 'success'
        run: |
          echo "✅ Package authsentry ${{ github.ref_name }} successfully published to GitHub Packages!"
      
      - name: Notify failure
        if: needs.publish.result == 'failure' || needs.test.result == 'failure'
        run: |
          echo "❌ Failed to publish package authsentry ${{ github.ref_name }}"
          exit 1
